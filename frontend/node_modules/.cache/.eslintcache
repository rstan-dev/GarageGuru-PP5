[{"/workspace/GarageGuru/frontend/src/index.js":"1","/workspace/GarageGuru/frontend/src/App.js":"2","/workspace/GarageGuru/frontend/src/reportWebVitals.js":"3","/workspace/GarageGuru/frontend/src/contexts/CurrentUserContext.js":"4","/workspace/GarageGuru/frontend/src/api/axiosDefaults.js":"5","/workspace/GarageGuru/frontend/src/components/NavBar.js":"6","/workspace/GarageGuru/frontend/src/components/PageNotFound.js":"7","/workspace/GarageGuru/frontend/src/pages/auth/LoginForm.js":"8","/workspace/GarageGuru/frontend/src/hooks/useToggleMenu.js":"9","/workspace/GarageGuru/frontend/src/pages/auth/RegisterForm.js":"10","/workspace/GarageGuru/frontend/src/pages/profile/ProfilePage.js":"11","/workspace/GarageGuru/frontend/src/pages/profile/EditProfileForm.js":"12","/workspace/GarageGuru/frontend/src/pages/profile/ChangePasswordForm.js":"13","/workspace/GarageGuru/frontend/src/pages/profile/ChangeUsernameForm.js":"14","/workspace/GarageGuru/frontend/src/pages/jobs/AddJobForm.js":"15","/workspace/GarageGuru/frontend/src/pages/jobs/JobPage.js":"16","/workspace/GarageGuru/frontend/src/pages/jobs/JobCard.js":"17","/workspace/GarageGuru/frontend/src/pages/jobs/AllJobsPage.js":"18","/workspace/GarageGuru/frontend/src/components/Asset.js":"19","/workspace/GarageGuru/frontend/src/utils/utils.js":"20","/workspace/GarageGuru/frontend/src/pages/jobs/EditJobForm.js":"21","/workspace/GarageGuru/frontend/src/components/ConfirmationModal.js":"22","/workspace/GarageGuru/frontend/src/pages/comments/CommentSection.js":"23","/workspace/GarageGuru/frontend/src/pages/comments/AddCommentForm.js":"24","/workspace/GarageGuru/frontend/src/pages/comments/EditCommentForm.js":"25","/workspace/GarageGuru/frontend/src/hooks/useRedirect.js":"26","/workspace/GarageGuru/frontend/src/pages/invoices/AddInvoiceForm.js":"27"},{"size":716,"mtime":1699192724000,"results":"28","hashOfConfig":"29"},{"size":2458,"mtime":1700296043000,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1699192667000,"results":"31","hashOfConfig":"29"},{"size":2526,"mtime":1700151058000,"results":"32","hashOfConfig":"29"},{"size":554,"mtime":1699192724000,"results":"33","hashOfConfig":"29"},{"size":3601,"mtime":1700151058000,"results":"34","hashOfConfig":"29"},{"size":380,"mtime":1699192709000,"results":"35","hashOfConfig":"29"},{"size":3574,"mtime":1700151058000,"results":"36","hashOfConfig":"29"},{"size":585,"mtime":1699192723000,"results":"37","hashOfConfig":"29"},{"size":4113,"mtime":1700151058000,"results":"38","hashOfConfig":"29"},{"size":2712,"mtime":1700151058000,"results":"39","hashOfConfig":"29"},{"size":5840,"mtime":1699192892000,"results":"40","hashOfConfig":"29"},{"size":3324,"mtime":1699192923000,"results":"41","hashOfConfig":"29"},{"size":2845,"mtime":1699192907000,"results":"42","hashOfConfig":"29"},{"size":11242,"mtime":1700151058000,"results":"43","hashOfConfig":"29"},{"size":3396,"mtime":1700319506847,"results":"44","hashOfConfig":"29"},{"size":9412,"mtime":1700320032298,"results":"45","hashOfConfig":"29"},{"size":7598,"mtime":1700151058000,"results":"46","hashOfConfig":"29"},{"size":395,"mtime":1699357599000,"results":"47","hashOfConfig":"29"},{"size":1566,"mtime":1700151058000,"results":"48","hashOfConfig":"29"},{"size":14047,"mtime":1699545421000,"results":"49","hashOfConfig":"29"},{"size":729,"mtime":1699539002000,"results":"50","hashOfConfig":"29"},{"size":2426,"mtime":1699979994000,"results":"51","hashOfConfig":"29"},{"size":2318,"mtime":1699979994000,"results":"52","hashOfConfig":"29"},{"size":4743,"mtime":1699979994000,"results":"53","hashOfConfig":"29"},{"size":799,"mtime":1700151058000,"results":"54","hashOfConfig":"29"},{"size":8458,"mtime":1700295527000,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"rvh762",{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/workspace/GarageGuru/frontend/src/index.js",[],["114","115"],"/workspace/GarageGuru/frontend/src/App.js",[],"/workspace/GarageGuru/frontend/src/reportWebVitals.js",[],"/workspace/GarageGuru/frontend/src/contexts/CurrentUserContext.js",[],"/workspace/GarageGuru/frontend/src/api/axiosDefaults.js",[],"/workspace/GarageGuru/frontend/src/components/NavBar.js",[],"/workspace/GarageGuru/frontend/src/components/PageNotFound.js",[],"/workspace/GarageGuru/frontend/src/pages/auth/LoginForm.js",[],"/workspace/GarageGuru/frontend/src/hooks/useToggleMenu.js",[],"/workspace/GarageGuru/frontend/src/pages/auth/RegisterForm.js",[],"/workspace/GarageGuru/frontend/src/pages/profile/ProfilePage.js",[],"/workspace/GarageGuru/frontend/src/pages/profile/EditProfileForm.js",[],"/workspace/GarageGuru/frontend/src/pages/profile/ChangePasswordForm.js",[],"/workspace/GarageGuru/frontend/src/pages/profile/ChangeUsernameForm.js",[],"/workspace/GarageGuru/frontend/src/pages/jobs/AddJobForm.js",["116"],"import React, { useState, useRef, useEffect } from 'react';\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nimport styles from '../../styles/AddEditJob.module.css'\n\nimport { useCurrentUser } from '../../contexts/CurrentUserContext';\nimport { useHistory } from \"react-router-dom\";\nimport axios from 'axios';\nimport { axiosReq } from '../../api/axiosDefaults';\n\nfunction AddJobForm() {\n    const currentUser = useCurrentUser();\n    const [users, setUsers] = useState([]);\n\n\n    // initialize state of job data\n    const [jobData, setJobData] = useState({\n        job_type: '',\n        job_details: '',\n        image: '',\n        due_date: '',\n        assigned_to: '',\n        status: 'Pending'\n      });\n\n    const {job_type, job_details, image, due_date, assigned_to, status } = jobData;\n\n    const imageInput = useRef()\n    const [errors, setErrors] = useState({});\n    const [successMessage, setSuccessMessage] = useState('');\n    const successTimeoutRef = useRef();\n    const history = useHistory();\n\n    // Set default assigned_to to current username\n    useEffect(() => {\n        if (!currentUser) {\n            // Redirect to login only if currentUser is explicitly null (not undefined)\n            history.push(\"/login\");\n            return;\n          }\n\n        if (currentUser && currentUser.pk) {\n            setJobData(prevState => ({\n              ...prevState,\n              assigned_to: currentUser.pk\n            }));\n          }\n        }, [currentUser]);\n\n    // Get list of profiles to populate assigned_to dropdown\n    useEffect(() => {\n        const fetchProfiles = async () => {\n            try {\n                const { data } = await axiosReq.get(`/profiles/`)\n                console.log(data)\n                setUsers(data.results);\n            } catch(err) {\n                console.log(err)\n            }\n        };\n        fetchProfiles();\n    }, []);\n\n    // Get current date to use as default in due_date\n        const getCurrentDate = () => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, '0');\n        const day = String(now.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}`;\n        }\n\n    // Sets the due_date field to curent date when form initially loads\n    useEffect(() => {\n        const currentDate = getCurrentDate();\n        setJobData(prevState => ({\n            ...prevState,\n            due_date: currentDate,\n        }));\n        }, []);\n\n      // handle any changes to main form\n      const handleChange = (event) => {\n        setJobData({\n            ...jobData,\n            [event.target.name]: event.target.value,\n        });\n      };\n\n      // handle any changes to image\n      const handleUploadImage = (event) => {\n        if (event.target.files.length){\n            URL.revokeObjectURL(image);\n            setJobData({\n                ...jobData,\n                image: URL.createObjectURL(event.target.files[0])\n            });\n        }\n      };\n\n    // Clears the success message timeout function\n    useEffect(() => {\n        return () => {\n            if (successTimeoutRef.current) {\n                clearTimeout(successTimeoutRef.current);\n            }\n        };\n    }, []);\n\n    const handleSubmit = async (event) => {\n    event.preventDefault()\n\n    let formErrors = {};\n\n    if (!job_type || job_type === 'Choose Job Type') {\n        formErrors.job_type = ['Job Type is Required. Please select a job type.'];\n    }\n\n    if (!due_date) {\n        formErrors.due_date = ['Due Date is required. Please select a due date.'];\n    }\n\n    if (Object.keys(formErrors).length > 0) {\n        setErrors(formErrors);\n        return;\n    }\n\n    const formData = new FormData();\n\n    formData.append('job_type', job_type)\n    formData.append('job_details', job_details)\n    formData.append('due_date', due_date)\n    formData.append('assigned_to', assigned_to)\n    formData.append('status', status)\n    if (imageInput.current && imageInput.current.files[0]) {\n        formData.append('image', imageInput.current.files[0]);\n        }\n\n    try {\n        const {data} = await axiosReq.post('/jobs/', formData)\n        setSuccessMessage('Job has been added successfully');\n        successTimeoutRef.current = setTimeout(() => {\n            setSuccessMessage('');\n            history.push(`/jobs/${data.id}`)\n            }, 1500);\n    } catch (err) {\n        if (axios.isAxiosError(err) && err.response) {\n            console.log(err.response.data);\n            console.log(err.response.status);\n            console.log(err.response.headers);\n            if (err.response.status !== 401) {\n                setErrors(err.response.data);\n            }\n            } else {\n            console.error(err);\n            setErrors({ message: [\"There was an error submitting the form.\"] });\n            }\n        };\n    };\n\n      // Text fields component to be rendered in form\n      const textFields = (\n        <div className='text-center'>\n            <Form.Group controlId=\"job_type\">\n                <Form.Label >Job Type:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"job_type\"\n                value={job_type}\n                onChange={handleChange}\n                isrequired=\"true\"\n                >\n                <option>Choose Job Type</option>\n                <option value=\"Major Service\">Major Service</option>\n                <option value=\"Minor Service\">Minor Service</option>\n                <option value=\"MOT\">MOT</option>\n                <option value=\"Tyre Change\">Tyre Change</option>\n                </Form.Control>\n            </Form.Group>\n            {errors?.job_type?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n\n            <Form.Group controlId=\"job_details\">\n                <Form.Label >Job Details:</Form.Label>\n                <Form.Control\n                as=\"textarea\"\n                name=\"job_details\"\n                rows={2}\n                value={job_details}\n                onChange={handleChange}\n                />\n            </Form.Group>\n            {errors?.job_details?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n\n            <Form.Group controlId=\"assigned_to\">\n                <Form.Label >Assigned to:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"assigned_to\"\n                value={assigned_to}\n                onChange={handleChange}\n                isrequired=\"true\"\n                >\n                <option>Choose a user</option>\n                {users.map((user) => (\n                    <option key={user.id} value={user.id}>\n                    {user.owner}\n                    </option>\n                ))}\n                </Form.Control>\n            </Form.Group>\n            {errors?.assigned_to?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n\n            <Form.Group controlId=\"due_date\">\n                <Form.Label >Due Date:</Form.Label>\n                <Form.Control\n                type=\"date\"\n                name=\"due_date\"\n                value={due_date}\n                onChange={handleChange}\n                min={getCurrentDate()}\n                />\n            </Form.Group>\n            {errors?.due_date?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n\n            <Form.Group controlId=\"status\">\n                <Form.Label >Status:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"status\"\n                value={status}\n                onChange={handleChange}\n                >\n                <option>Select status</option>\n                <option value=\"Pending\">Pending</option>\n                <option value=\"Underway\">Underway</option>\n                <option value=\"Completed\">Completed</option>\n                <option value=\"Overdue\">Overdue</option>\n                </Form.Control>\n            </Form.Group>\n            {errors?.status?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n        </div>\n      )\n\n    return (\n        <Container className={styles.AddEditJobForm}>\n            <Col xs={12} sm={12} md={10} lg={8} xl={6}>\n            {/* Display success message */}\n            {successMessage && <Alert variant=\"success\">{successMessage}</Alert>}\n\n            <Form onSubmit={handleSubmit}>\n                <div>AddJobForm</div>\n\n                        <div className=\"card\">\n                        {textFields}\n\n                        <Form.Group className=\"text-center\">\n                        {image ? (\n                            <>\n                            <figure>\n                                <Image className={styles.Image} src={image} rounded/>\n                            </figure>\n                            {errors?.image?.map((message, index) => (\n                                <Alert variant=\"warning\" key={index}>\n                                    {message}\n                                </Alert>\n                            ))}\n\n                            <div>\n                            <Form.Label\n                                className=\"d-flex justify-content-center\"\n                                htmlFor=\"image-upload\">\n                                <p>Change image</p>\n                                </Form.Label>\n                            </div>\n                            </>\n                        ) : (\n                            <Form.Label\n                                className=\"d-flex justify-content-center\"\n                                htmlFor=\"image-upload\">\n                                <i className=\"fa-solid fa-arrow-up-from-bracket\"></i>\n                                <p>Upload an image</p>\n                                </Form.Label>\n                        )}\n                                <Form.File\n                                id=\"image-upload\"\n                                accept=\"image/*\"\n                                ref={imageInput}\n                                onChange={handleUploadImage}\n                                />\n                            </Form.Group>\n                        </div>\n                <Button\n                variant=\"warning\"\n                onClick={() => history.goBack()}\n                >\n                    Cancel\n                </Button>\n                <Button\n                variant=\"success\"\n                type=\"submit\">\n                    Add Job\n                </Button>\n            </Form>\n        </Col>\n        </Container>\n    )\n}\n\nexport default AddJobForm","/workspace/GarageGuru/frontend/src/pages/jobs/JobPage.js",["117"],"/workspace/GarageGuru/frontend/src/pages/jobs/JobCard.js",["118","119","120"],"/workspace/GarageGuru/frontend/src/pages/jobs/AllJobsPage.js",["121"],"import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport styles from '../../styles/AllJobsPage.module.css'\nimport { axiosReq } from '../../api/axiosDefaults';\nimport { useCurrentUser } from '../../contexts/CurrentUserContext';\nimport JobCard from './JobCard';\nimport Asset from '../../components/Asset';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { fetchMoreData } from '../../utils/utils';\nimport { useHistory } from \"react-router-dom\";\n\nfunction AllJobsPage({ message, filter = \"\" }) {\n\n    const [jobs, setJobs] = useState({ results: []});\n    const [hasLoaded, setHasLoaded] = useState(false);\n    const { pathname } = useLocation();\n    const currentUser = useCurrentUser();\n    const history = useHistory();\n\n    const [statusCounts, setStatusCounts] = useState({\n        Pending: 0,\n        Underway: 0,\n        Completed: 0,\n    });\n\n    const [query, setQuery] = useState (\"\");\n    const [orderingField, setOrderingField] = useState(null);\n\n    useEffect(() => {\n        if (!currentUser) {\n            // Redirect to login only if currentUser is explicitly null (not undefined)\n            history.push(\"/login\");\n            return;\n          }\n\n        const fetchJobs = async () => {\n            try {\n                const {data} = await axiosReq.get(`/jobs/?${filter}search=${query}&ordering=${orderingField}`);\n                setJobs(data);\n                setStatusCounts(data.status_counts);\n                setHasLoaded(true);\n            } catch (err) {\n                console.log(err);\n            }\n        };\n        setHasLoaded(false);\n        fetchJobs();\n\n    }, [pathname, currentUser, filter, query, orderingField]);\n\n\n    const handleOrderBy = (field) => {\n        // sets the ordering field state for created date, updated date\n        // and due date\n        setOrderingField(field);\n      };\n\n\n    return (\n        <Container className={styles.JobCard}>\n            <Col xs={12} sm={12} md={10} lg={10} xl={10}>\n                <h1>All Jobs</h1>\n                <div className={styles.CardBlock}>\n                    {\n                    // Status Block //\n                    }\n\n                    <p>Filter by:</p>\n                    <div className={`row ${styles['StatusBlock']}`}>\n                        <div className=\"col-md-4\"\n                            onClick={() => {setQuery(\"Pending\")}}>\n                            <div className=\"card\">\n                                <div className=\"card-body text-center\">\n                                    <i className={`fa-solid fa-bell-concierge ${styles['PendingIcon']}`}></i>\n                                    <h2 className=\"card-title\">Pending</h2>\n                                    {statusCounts.Pending ? (\n                                            <p className=\"card-text\">{statusCounts.Pending}</p>\n                                        ) : (\n                                            <p className=\"card-text\">0</p>\n                                        )}\n                                </div>\n                            </div>\n\n                        </div>\n                        <div className=\"col-md-4\"\n                            onClick={() => {setQuery(\"Underway\")}}>\n                            <div className=\"card\">\n                                <div className=\"card-body text-center\">\n                                    <i className={`fa-solid fa-hourglass-half ${styles['UnderwayIcon']}`}></i>\n                                    <h2 className=\"card-title\">Underway</h2>\n                                    {statusCounts.Underway ? (\n                                            <p className=\"card-text\">{statusCounts.Underway}</p>\n                                        ) : (\n                                            <p className=\"card-text\">0</p>\n                                        )}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\"\n                            onClick={() => {setQuery(\"Completed\")}}>\n                            <div className=\"card\">\n                                <div className=\"card-body text-center\">\n                                <i className={`fa-solid fa-flag-checkered ${styles['CompletedIcon']}`}></i>\n                                <h2 className=\"card-title\">Completed</h2>\n                                    {statusCounts.Completed ? (\n                                        <p className=\"card-text\">{statusCounts.Completed}</p>\n                                    ) : (\n                                        <p className=\"card-text\">0</p>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <p className=\"text-md-end\">Order by:</p>\n                    <div className={`row ${styles.OrderBySection}`}>\n\n                        <div className=\"col-md-4\">\n                            <Button onClick={() => handleOrderBy('-created_at')} variant=\"secondary\">Recently Created</Button>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Button onClick={() => handleOrderBy('-updated_at')} variant=\"secondary\">Recently Updated</Button>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Button onClick={() => handleOrderBy('due_date')} variant=\"secondary\">Due Date</Button>\n                        </div>\n\n                    </div>\n                    {\n                    // Search bar //\n                    }\n                    <i className={`fas fa-search ${styles.SearchIcon}`} />\n                    <Form\n                    className={styles.SearchBar}\n                    onSubmit={(event) => event.preventDefault()}\n                    >\n                        <Form.Control\n                        type=\"text\"\n                        className=\"mr-sm-2\"\n                        placeholder=\"Search jobs\"\n                        value={query}\n                        onChange={(event) => setQuery(event.target.value)}\n                        />\n                    </Form>\n                    </div>\n\n                        {hasLoaded ? (\n                        <>\n                        { jobs?.results?.length ? (\n                            <InfiniteScroll\n                              children={\n                                jobs.results.map((job) => (\n                                    <JobCard key={job.id} {...job} setJobs={setJobs}/>\n                                ))\n                              }\n                              dataLength={jobs.results.length}\n                              loader={<Asset spinner />}\n                              hasMore={!!jobs.next}\n                              next={() => fetchMoreData(jobs, setJobs)}\n                            />\n                        ) : (\n                            <Asset icon={\"fa-solid fa-clipboard-question\"} message={\"No Jobs to display\"} />\n                        )}\n                        </>\n                        ) : (\n                            <Asset spinner message={\"loading jobs\"} />\n                        )}\n            </Col>\n        </Container>\n  )\n}\n\nexport default AllJobsPage","/workspace/GarageGuru/frontend/src/components/Asset.js",[],"/workspace/GarageGuru/frontend/src/utils/utils.js",[],"/workspace/GarageGuru/frontend/src/pages/jobs/EditJobForm.js",["122","123"],"import React, { useState, useRef, useEffect } from 'react';\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nimport styles from '../../styles/AddEditJob.module.css'\n\nimport { useCurrentUser } from '../../contexts/CurrentUserContext';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport { axiosReq, axiosRes } from '../../api/axiosDefaults';\nimport ConfirmationModal from '../../components/ConfirmationModal';\n\n\nfunction EditJobForm() {\n\n    const currentUser = useCurrentUser();\n    const [users, setUsers] = useState([]);\n    const  {id} = useParams()\n\n    // initialize state of job data\n    const [jobData, setJobData] = useState({\n        job_type: '',\n        job_details: '',\n        image: '',\n        due_date: '',\n        assigned_to: '',\n        status: '',\n        is_owner: null\n      });\n\n    const {job_type, job_details, image, due_date, assigned_to, status, is_owner } = jobData;\n\n    const imageInput = useRef()\n    const [errors, setErrors] = useState({});\n    const [successMessage, setSuccessMessage] = useState('');\n    const successTimeoutRef = useRef();\n    const history = useHistory();\n\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n    const [confirmationModalContent, setConfirmationModalContent] = useState({\n        title: '',\n        body: '',\n        confirmAction: () => {},\n      });\n\n    // Gets original JobCard data to populate form\n    useEffect(() => {\n        const handleMount = async () => {\n          try {\n            const { data } = await axiosReq.get(`/jobs/${id}/`);\n            const { job_type, job_details, image, due_date, assigned_to, status, is_owner } = data;\n\n            is_owner ? setJobData({ job_type, job_details, image, due_date, assigned_to, status, }) : history.push(\"/\")\n          } catch (err) {\n            // console.log(err);\n          }\n        };\n        handleMount();\n      }, [history, id]);\n\n\n    // Get list of profiles to populate assigned_to dropdown\n    useEffect(() => {\n        const fetchProfiles = async () => {\n            try {\n                const { data } = await axiosReq.get(`/profiles/`)\n                console.log(data)\n                setUsers(data.results);\n            } catch(err) {\n                console.log(err)\n            }\n        };\n        fetchProfiles();\n    }, []);\n\n    // Get current date to use as minimum date - prevents a user selecting\n    // a past date\n    const getCurrentDate = () => {\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, '0');\n        const day = String(now.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}`;\n        }\n\n    // handle any changes to main form\n    const handleChange = (event) => {\n    setJobData({\n        ...jobData,\n        [event.target.name]: event.target.value,\n    });\n    };\n\n    // handle any changes to image\n    const handleUploadImage = (event) => {\n    if (event.target.files.length){\n        URL.revokeObjectURL(image);\n        setJobData({\n            ...jobData,\n            image: URL.createObjectURL(event.target.files[0])\n        });\n    }\n    };\n\n    // Clears the success message timeout function\n    useEffect(() => {\n        return () => {\n            if (successTimeoutRef.current) {\n                clearTimeout(successTimeoutRef.current);\n            }\n        };\n    }, []);\n\n    // Handles update submission using confrimationModal to verify user actions\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        let formErrors = {};\n\n        if (!job_type || job_type === 'Choose Job Type') {\n            formErrors.job_type = ['Job Type is Required. Please select a job type.'];\n        }\n\n        if (!due_date) {\n            formErrors.due_date = ['Due Date is required. Please select a due date.'];\n        }\n\n        if (Object.keys(formErrors).length > 0) {\n            setErrors(formErrors);\n            return;\n        }\n\n        setConfirmationModalContent({\n            title: 'Confirm Job Update',\n            body: 'Are you sure you want to update this job?',\n            confirmAction: handleUpdateConfirm, // References the function that performs the update\n          });\n        setShowConfirmationModal(true);\n    };\n\n    // Updates api and closes Confirmation Modal when update confirmed\n    const handleUpdateConfirm = async () => {\n        const formData = new FormData();\n\n        formData.append('job_type', job_type)\n        formData.append('job_details', job_details)\n        formData.append('due_date', due_date)\n        formData.append('assigned_to', assigned_to)\n        formData.append('status', status)\n        if (imageInput.current && imageInput.current.files[0]) {\n            formData.append('image', imageInput.current.files[0]);\n            }\n        try {\n            await axiosReq.put(`/jobs/${id}/`, formData)\n            setSuccessMessage('Job has been updated successfully');\n            successTimeoutRef.current = setTimeout(() => {\n                setSuccessMessage('');\n                history.push(`/jobs/${id}`)\n                }, 1500);\n        } catch (err) {\n            if (axios.isAxiosError(err) && err.response) {\n                console.log(err.response.data);\n                console.log(err.response.status);\n                console.log(err.response.headers);\n                if (err.response.status !== 401) {\n                    setErrors(err.response.data);\n                }\n                } else {\n                console.error(err);\n                setErrors({ message: [\"There was an error submitting the form.\"] });\n                }\n            };\n\n        setShowConfirmationModal(false);\n    };\n\n    // Handles the delete button\n    const handleDelete = () => {\n\n        setConfirmationModalContent({\n            title: 'Confirm Job Deletion',\n            body: 'Are you sure you want to delete this job? This action cannot be undone.',\n            confirmAction: handleDeleteConfirm, // Reference to the function that performs the delete\n            });\n        setShowConfirmationModal(true);\n    }\n\n    // Submits the delete request after modal confirmation\n    const handleDeleteConfirm = async () => {\n        try {\n        await axiosRes.delete(`/jobs/${id}/`);\n            setSuccessMessage('Job has been deleted successfully');\n            successTimeoutRef.current = setTimeout(() => {\n                setSuccessMessage('');\n                history.goBack();\n            }, 1500);\n        } catch (err) {\n            console.log(err);\n        };\n        setShowConfirmationModal(false);\n    };\n\n    // Handles modal's confirmation\n    const handleModalConfirm = () => {\n        confirmationModalContent.confirmAction();\n    };\n\n    // This function will be used to close the modal without taking action\n    const handleModalClose = () => {\n        setShowConfirmationModal(false);\n    };\n\n      // Text fields component to be rendered in form\n      const textFields = (\n        <div className='text-center'>\n             {/* Job Type Field */}\n            <Form.Group controlId=\"job_type\">\n                <Form.Label >Job Type:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"job_type\"\n                value={job_type}\n                onChange={handleChange}\n                isrequired=\"true\"\n                >\n                <option>Choose Job Type</option>\n                <option value=\"Major Service\">Major Service</option>\n                <option value=\"Minor Service\">Minor Service</option>\n                <option value=\"MOT\">MOT</option>\n                <option value=\"Tyre Change\">Tyre Change</option>\n                </Form.Control>\n            </Form.Group>\n            {errors?.job_type?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n            {/* Job Details Field */}\n            <Form.Group controlId=\"job_details\">\n                <Form.Label >Job Details:</Form.Label>\n                <Form.Control\n                as=\"textarea\"\n                name=\"job_details\"\n                rows={2}\n                value={job_details}\n                onChange={handleChange}\n                />\n            </Form.Group>\n            {errors?.job_details?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n            {/* Assigned To Field */}\n            <Form.Group controlId=\"assigned_to\">\n                <Form.Label >Assigned to:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"assigned_to\"\n                value={assigned_to}\n                onChange={handleChange}\n                isrequired=\"true\"\n                >\n                <option>Choose a user</option>\n                {users.map((user) => (\n                    <option key={user.id} value={user.id}>\n                    {user.owner}\n                    </option>\n                ))}\n                </Form.Control>\n            </Form.Group>\n            {errors?.assigned_to?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n            {/* Due Date Field */}\n            <Form.Group controlId=\"due_date\">\n                <Form.Label >Due Date:</Form.Label>\n                <Form.Control\n                type=\"date\"\n                name=\"due_date\"\n                value={due_date}\n                onChange={handleChange}\n                min={getCurrentDate()}\n                />\n            </Form.Group>\n            {errors?.due_date?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n            {/* Status Field */}\n            <Form.Group controlId=\"status\">\n                <Form.Label >Status:</Form.Label>\n                <Form.Control\n                as=\"select\"\n                name=\"status\"\n                value={status}\n                onChange={handleChange}\n                >\n                <option>Select status</option>\n                <option value=\"Pending\">Pending</option>\n                <option value=\"Underway\">Underway</option>\n                <option value=\"Completed\">Completed</option>\n                <option value=\"Overdue\">Overdue</option>\n                </Form.Control>\n            </Form.Group>\n            {errors?.status?.map((message, index) => (\n                <Alert variant=\"danger\" key={index}>\n                    {message}\n                </Alert>\n            ))}\n        </div>\n      )\n\n    return (\n        <Container className={styles.AddEditJobForm}>\n            <Col xs={12} sm={12} md={10} lg={8} xl={6}>\n            {/* Display success message */}\n            {successMessage && <Alert variant=\"success\">{successMessage}</Alert>}\n\n            <Form onSubmit={(e) => e.preventDefault()}>\n                <div>AddJobForm</div>\n\n                        <div className=\"card\">\n                        {textFields}\n                        {/* Image & Image Change Field */}\n                        <Form.Group className=\"text-center\">\n                        {image ? (\n                            <>\n                            <figure>\n                                <Image className={styles.Image} src={image} rounded/>\n                            </figure>\n                            {errors?.image?.map((message, index) => (\n                                <Alert variant=\"warning\" key={index}>\n                                    {message}\n                                </Alert>\n                            ))}\n\n                            <div>\n                            <Form.Label\n                                className=\"d-flex justify-content-center\"\n                                htmlFor=\"image-upload\">\n                                <p>Change image</p>\n                                </Form.Label>\n                            </div>\n                            </>\n                        ) : (\n                            <Form.Label\n                                className=\"d-flex justify-content-center\"\n                                htmlFor=\"image-upload\">\n                                <i className=\"fa-solid fa-arrow-up-from-bracket\"></i>\n                                <p>Upload an image</p>\n                                </Form.Label>\n                        )}\n                                <Form.File\n                                id=\"image-upload\"\n                                accept=\"image/*\"\n                                ref={imageInput}\n                                onChange={handleUploadImage}\n                                />\n                            </Form.Group>\n                        </div>\n                <Button\n                variant=\"warning\"\n                onClick={() => history.goBack()}\n                >\n                    Cancel\n                </Button>\n                <Button\n                variant=\"success\"\n                onClick={handleSubmit}>\n                    Update Job\n                </Button>\n                <Button\n                variant=\"danger\"\n                onClick={handleDelete}>\n                    Delete Job\n                </Button>\n            </Form>\n            {/* Confirmation Modal */}\n            <ConfirmationModal\n            showModal={showConfirmationModal}\n            handleClose={handleModalClose}\n            handleConfirm={handleModalConfirm}\n            title={confirmationModalContent.title}\n            body={confirmationModalContent.body}\n            />\n        </Col>\n        </Container>\n    )\n}\n\nexport default EditJobForm","/workspace/GarageGuru/frontend/src/components/ConfirmationModal.js",[],"/workspace/GarageGuru/frontend/src/pages/comments/CommentSection.js",[],"/workspace/GarageGuru/frontend/src/pages/comments/AddCommentForm.js",[],"/workspace/GarageGuru/frontend/src/pages/comments/EditCommentForm.js",[],"/workspace/GarageGuru/frontend/src/hooks/useRedirect.js",[],"/workspace/GarageGuru/frontend/src/pages/invoices/AddInvoiceForm.js",["124","125","126","127"],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":54,"column":12,"nodeType":"134","endLine":54,"endColumn":25,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":11,"column":8,"nodeType":"138","messageId":"139","endLine":11,"endColumn":13},{"ruleId":"136","severity":1,"message":"140","line":30,"column":9,"nodeType":"138","messageId":"139","endLine":30,"endColumn":24},{"ruleId":"136","severity":1,"message":"141","line":31,"column":9,"nodeType":"138","messageId":"139","endLine":31,"endColumn":15},{"ruleId":"136","severity":1,"message":"142","line":36,"column":9,"nodeType":"138","messageId":"139","endLine":36,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":55,"column":8,"nodeType":"134","endLine":55,"endColumn":61,"suggestions":"143"},{"ruleId":"136","severity":1,"message":"144","line":21,"column":11,"nodeType":"138","messageId":"139","endLine":21,"endColumn":22},{"ruleId":"136","severity":1,"message":"145","line":36,"column":73,"nodeType":"138","messageId":"139","endLine":36,"endColumn":81},{"ruleId":"136","severity":1,"message":"144","line":17,"column":11,"nodeType":"138","messageId":"139","endLine":17,"endColumn":22},{"ruleId":"136","severity":1,"message":"146","line":18,"column":12,"nodeType":"138","messageId":"139","endLine":18,"endColumn":17},{"ruleId":"136","severity":1,"message":"147","line":18,"column":19,"nodeType":"138","messageId":"139","endLine":18,"endColumn":27},{"ruleId":"136","severity":1,"message":"148","line":37,"column":12,"nodeType":"138","messageId":"139","endLine":37,"endColumn":15},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["151"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'job_assigned_to' is assigned a value but never used.","'job_id' is assigned a value but never used.","'inv_created_at' is assigned a value but never used.",["152"],"'currentUser' is assigned a value but never used.","'is_owner' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'job' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [currentUser, history]",{"range":"157","text":"158"},"Update the dependencies array to be: [pathname, currentUser, filter, query, orderingField, history]",{"range":"159","text":"160"},[1671,1684],"[currentUser, history]",[1845,1898],"[pathname, currentUser, filter, query, orderingField, history]"]